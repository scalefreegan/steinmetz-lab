{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "codez71GNz",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "library(devtools);",
                    "library(ggplot2);",
                    "library(plyr);",
                    "library(dplyr);",
                    "library(reshape2);",
                    "library(parallel);",
                    "options(mc.cores = 24);",
                    "library(stringr);",
                    "library(RColorBrewer);",
                    "library(GenomicRanges);",
                    "library(tidyr);",
                    "library(forcats);",
                    "library(tibble);",
                    "library(readr);",
                    "library(webreadr);",
                    "library(ggforce);",
                    "library(qtl);",
                    "library(funqtl);",
                    "library(snow);",
                    "library(GGally);",
                    "",
                    "RESULTS = \"/g/steinmetz/brooks/genphen/metabolome/alt_traits\"",
                    "",
                    "strainRename = function(strains) {",
                    "    o = sapply(strains,function(strain){",
                    "        if (nchar(strain)==3) {",
                    "            strain = gsub(\"^X\",\"0\",strain)",
                    "        } else if (nchar(strain)==2) {",
                    "            strain = paste(\"0\", strain, sep=\"\")",
                    "        } else {",
                    "            strain = gsub(\"^X\",\"\",strain)",
                    "        }",
                    "        if (length(grep(\"\\\\.\",strain))>0) {",
                    "            rep = as.numeric(strsplit(strsplit(strain, split = \"_\")[[1]][2], split = \"\\\\.\")[[1]][1]) + 1",
                    "            strain = paste(strsplit(strain, split = \"_\")[[1]][1], rep, sep = \"_\")",
                    "        }",
                    "        return(strain)",
                    "    })",
                    "    return(o)",
                    "}",
                    "",
                    "# load data",
                    "thisdata = read_tsv(file.path(RESULTS,\"alldata.txt\")) %>% ",
                    "    separate(strain, into = c(\"strain\",\"rep\"), sep = \"_\") %>% ",
                    "    mutate(strain = strainRename(strain), metabolite = toupper(metabolite))",
                    "#head(thisdata)",
                    "",
                    "# load genotype and markers files",
                    "genotype_f = \"/g/steinmetz/brooks/yeast/genomes/S288CxYJM789/genotypes_S288c_R64.rda\"",
                    "load(genotype_f)",
                    "",
                    "var.phe = log2(acast(data = thisdata, formula = metabolite ~ strain, ",
                    "              value.var=\"variance\", fun.aggregate = mean, na.rm = T))",
                    "var.phe[is.infinite(var.phe)] = NA",
                    "var.phe[is.na(var.phe)] = NA",
                    "var.phe.raw = acast(data = thisdata, formula = metabolite ~ strain, ",
                    "              value.var=\"variance\", fun.aggregate = mean, na.rm = T)",
                    "    ",
                    "ss.phe = log2(acast(data = thisdata, formula = metabolite ~ strain, ",
                    "              value.var=\"sum.of.slopes\", fun.aggregate = mean, na.rm = T))",
                    "ss.phe[is.infinite(ss.phe)] = NA",
                    "ss.phe[is.na(ss.phe)] = NA",
                    "ss.phe.raw = acast(data = thisdata, formula = metabolite ~ strain, ",
                    "              value.var=\"sum.of.slopes\", fun.aggregate = mean, na.rm = T)",
                    "    ",
                    "auc.phe = log2(acast(data = thisdata, formula = metabolite ~ strain, ",
                    "              value.var=\"auc\", fun.aggregate = mean, na.rm = T))",
                    "auc.phe[is.infinite(auc.phe)] = NA",
                    "auc.phe[is.na(auc.phe)] = NA",
                    "auc.phe.raw = acast(data = thisdata, formula = metabolite ~ strain, ",
                    "              value.var=\"auc\", fun.aggregate = mean, na.rm = T)",
                    "",
                    "# Only run QTL detection if corresponding file does not exist",
                    "f1 = file.path(RESULTS, \"var_funqtl.rds\")",
                    "f2 = file.path(RESULTS, \"sumsslope_funqtl.rds\")",
                    "f3 = file.path(RESULTS, \"auc_funqtl.rds\")",
                    "rerun = F",
                    "",
                    "for (i in c(f1, f2, f3)) {",
                    "    if (!file.exists(i) | rerun) {",
                    "        # QTLs",
                    "        if (i == f1) {",
                    "            pheno = var.phe",
                    "        } else if (i == f2) {",
                    "            pheno = ss.phe",
                    "        } else {",
                    "            pheno = auc.phe",
                    "        }",
                    "        cross = runQTL(",
                    "                    genotype = geno,",
                    "                    phenotype = t(pheno),",
                    "                    marker_info = mrk,",
                    "                    return_cross = TRUE,",
                    "                    estimate.map = FALSE",
                    "                    )",
                    "        these_phe = rownames(pheno)",
                    "        pcols = seq(1, length(these_phe))",
                    "",
                    "        qtls = scanone(cross, method = \"hk\", pheno.col = pcols, use=\"complete.obs\")",
                    "",
                    "        eff = geteffects(cross, pheno.col = pcols)",
                    "",
                    "        # calc permutation threshold",
                    "        permout = mclapply(pcols, function(x) {",
                    "            try({",
                    "                cat(these_phe[x],\"\\n\")",
                    "                scanoneF(cross, pheno.cols = x,",
                    "                                method = \"hk\", n.perm = 1000, n.cluster = 12, verbose = F, use=\"complete.obs\")",
                    "                })",
                    "            })",
                    "        names(permout) = these_phe",
                    "",
                    "        # identify chrs with slod/lod above permute val",
                    "        qtl_intervals = do.call(rbind, lapply(pcols, function(x){",
                    "            thismetabolite = these_phe[x]",
                    "            # lod cutoff",
                    "            lod = summary(permout[[thismetabolite]])[\"10%\",\"mlod\"]",
                    "            # find sig chrs",
                    "            sigchrs = as.character(unique(qtls[which(qtls[,thismetabolite] >= lod),\"chr\"]))",
                    "            if (length(sigchrs)>0) {",
                    "                intervals = do.call(rbind, lapply(sigchrs, function(y){",
                    "                    o = as.data.frame(mrk[rownames(bayesint(qtls,",
                    "                      chr = str_pad(as.character(y), 2, pad = \"0\"), prob=0.9, lodcolumn=x))]) %>%",
                    "                        mutate(metabolite = thismetabolite)",
                    "                    o = o %>% summarise(seqnames = unique(seqnames), start = min(start),",
                    "                                       end = max(end), width = end-start+1, ",
                    "                                        metabolite = unique(metabolite))",
                    "                    return(o)",
                    "                }))",
                    "            } else {",
                    "                intervals = data.frame()",
                    "            }",
                    "            return(intervals)",
                    "        }))",
                    "",
                    "        o = list(qtls = qtls, eff = eff, qtl_intervals = qtl_intervals,",
                    "            permout = permout, pcols = pcols)    ",
                    "",
                    "        saveRDS(o , file = i)",
                    "    }",
                    "    if (i == f1) {",
                    "            var.qtls <- readRDS(f1)",
                    "        } else if (i == f2) {",
                    "            ss.qtls <- readRDS(f2)",
                    "        } else {",
                    "            auc.qtls <- readRDS(f3)",
                    "    }",
                    "} "
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "Parsed with column specification:\ncols(\n  strain = col_character(),\n  variance = col_double(),\n  sum.of.slopes = col_double(),\n  auc = col_double(),\n  metabolite = col_character()\n)\n"
                        }
                    ],
                    "payload": ""
                },
                "selectedType": "Results",
                "pluginName": "R",
                "shellId": "87c74322-cbb0-44b3-9a39-c58625c699c6",
                "elapsedTime": 5687,
                "dataresult": "ERROR: invalid object type NULL",
                "height": 147
            },
            "evaluatorReader": true,
            "lineCount": 148
        }
    ],
    "namespace": {}
}
