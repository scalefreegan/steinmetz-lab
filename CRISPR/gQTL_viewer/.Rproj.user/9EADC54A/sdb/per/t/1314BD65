{
    "contents" : "# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://www.rstudio.com/shiny/\n#\n#-------------------------------------------------------------------#\n# Shiny interface for ploting/exploring mQTLs\n#\n#-------------------------------------------------------------------#\n\n.author = \"Aaron Brooks\"\n.copyright = \"Copyright 2015\"\n.credits = \"Aaron Brooks\"\n.license = \"WTFPL\"\n.version = \"0.0.1\"\n.maintainer = \"Aaron Brooks\"\n.email = \"aaron.brooks@embl.de\"\n.status = \"Development\"\n.plot = FALSE\n\n\nshinyServer(function(input, output, session) {\n\n  options(DT.options = list(pageLength = 10, searching = TRUE))\n\n  gbrowse_link = function(chr,start,end,flanking = c(-2000,2000)) {\n    start = start - abs(flanking[1])\n    if (start < 0) {\n      start = 1\n    }\n    end = end + abs(flanking[2])\n    val = paste(\"chr\",as.roman(chr),\":\",start,\"..\",end, sep = \"\")\n    #sprintf('<a href=\"http://browse.yeastgenome.org/fgb2/gbrowse/scgenome/?name=%s\" target=\"_blank\" class=\"btn btn-primary\">Go to gene</a>',\n    #        val)\n    sprintf('<a href=\"http://steinmetzlab.embl.de/mQTL/?loc=%s\" target=\"_blank\" class=\"btn btn-primary\">Go to gene</a>',\n            val)\n  }\n\n  df_full = reactive({\n    # select chromosomes\n    chrs = unique(data[[input$m]]$qtl[data[[input$m]]$qtl[,type]>=summary(data[[input$m]]$permout[,type],input$co/100)[1],\"chr\"])\n    chrs = levels(chrs)[chrs]\n    lodcolumn = if(type==\"mlod\"){ 2 } else { 1 }\n    qtl_intervals = list()\n    if (length(chrs)>0) {\n      for (i in chrs) {\n        qtl_intervals[[i]] = try(mrk[rownames(bayesint(data[[input$m]]$qtl, chr = str_pad(i, 2, pad = \"0\"), prob=input$bci/100, lodcolumn=lodcolumn))],silent = T)\n        if (class(qtl_intervals[[i]])==\"try-error\") {\n          qtl_intervals[[i]] = NULL\n        } else {\n          nn = sapply(as.character(seqnames(qtl_intervals[[i]])),function(i){\n            paste(substr(i,1,3),as.roman(substr(i,4,5)),sep=\"\")\n          })\n          qtl_intervals[[i]] = renameSeqlevels(qtl_intervals[[i]],nn)\n          qtl_intervals[[i]] = keepSeqlevels(qtl_intervals[[i]],unique(nn))\n          qtl_intervals[[i]] = range(qtl_intervals[[i]])\n          qtl_intervals[[i]] = as.data.frame(cdsByOverlaps(TxDb.Scerevisiae.UCSC.sacCer3.sgdGene,qtl_intervals[[i]], type = \"any\", columns = \"gene_id\"))\n        }\n      }\n    }\n    qtl_df = do.call(rbind,qtl_intervals)\n    if (length(qtl_df) != 0) {\n      qtl_df$gene_id = unlist(qtl_df$gene_id)\n      gname_t = unlist(gname[unlist(qtl_df$gene_id)])\n      gname_t = data.frame(gene_id = names(gname_t), name = gname_t)\n      dname_t = unlist(dname[unlist(qtl_df$gene_id)])\n      dname_t = data.frame(gene_id = names(dname_t), alias = dname_t)\n      dname_t_long = unlist(dname_long[unlist(qtl_df$gene_id)])\n      dname_t_long = data.frame(gene_id = names(dname_t_long), desc = dname_t_long)\n      qtl_df = merge(qtl_df,gname_t,by=\"gene_id\",sort=F,all.x=T)\n      qtl_df = merge(qtl_df,dname_t,by=\"gene_id\",sort=F,all.x=T)\n      qtl_df = merge(qtl_df,dname_t_long,by=\"gene_id\",sort=F,all.x=T)\n      qtl_df = qtl_df[,c(\"gene_id\",\"name\",\"seqnames\",\"start\",\"end\",\"strand\",\"alias\",\"desc\")]\n      colnames(qtl_df) = c(\"Sys.Name\",\"Name\",\"Chr\",\"Start\",\"End\",\"Strand\",\"Alias\",\"Desc\")\n      #rownames(qtl_df) = qtl_df[,\"Sys.Name\"]\n      qtl_df = qtl_df[!duplicated(qtl_df),]\n      # add stitch predictions\n      stitch = as.data.frame(filter(genphen_stitch,\n                protein%in%unlist(qtl_df$Sys.Name),alias==input$m)%>%ungroup())[,c(\"protein\",\"score\")]\n      colnames(stitch)[2] = \"STITCH\"\n      qtl_df = merge(qtl_df,stitch,by.x=\"Sys.Name\",by.y=\"protein\",sort=F,all.x=T)\n      # add snps\n      #\n      # TODO: break out sub categrories as pie charts or something similar\n      return(qtl_df)\n    } else {\n      return(data.frame())\n    }\n  })\n\n  df_var = reactive({\n    qtl_df = df_full()\n    if (dim(qtl_df)[1]>0) {\n      var_df = filter(var_info, SNPEFF_TRANSCRIPT_ID%in%unlist(qtl_df$Sys.Name)) %>%\n        group_by(.,SNPEFF_TRANSCRIPT_ID) %>%\n        do({\n          data.frame(\n            SNPS = sum(.$id==\"snp\"),\n            INDELS = sum(.$id==\"indel\"),\n            UPSTREAM = sum(.$SNPEFF_EFFECT==\"UPSTREAM\"),\n            DOWNSTREAM = sum(.$SNPEFF_EFFECT==\"DOWNSTREAM\"),\n            INTRONS = sum(.$SNPEFF_EFFECT==\"INTRONS\"),\n            CODING = sum(.$SNPEFF_EFFECT%in%c(\"UPSTREAM\",\"DOWNSTREAM\",\"INTRONS\")==FALSE),\n            HIGH = sum(.$SNPEFF_IMPACT==\"HIGH\"),\n            START_LOST = sum(.$SNPEFF_EFFECT==\"START_LOST\"),\n            STOP_GAINED = sum(.$SNPEFF_EFFECT==\"STOP_GAINED\"),\n            STOP_LOST = sum(.$SNPEFF_EFFECT==\"STOP_LOST\"),\n            FRAME_SHIFT = sum(.$SNPEFF_EFFECT==\"FRAME_SHIFT\"),\n            MODERATE = sum(.$SNPEFF_IMPACT==\"MODERATE\"),\n            NON_SYNONYMOUS_CODING = sum(.$SNPEFF_EFFECT==\"NON_SYNONYMOUS_CODING\"),\n            CODON_DELETION = sum(.$SNPEFF_EFFECT==\"CODON_DELETION\"),\n            CODON_INSERTION = sum(.$SNPEFF_EFFECT==\"CODON_INSERTION\"),\n            CODON_CHANGE_PLUS_CODON_DELETION = sum(.$SNPEFF_EFFECT==\"CODON_CHANGE_PLUS_CODON_DELETION\"),\n            CODON_CHANGE_PLUS_CODON_INSERTION = sum(.$SNPEFF_EFFECT==\"CODON_CHANGE_PLUS_CODON_INSERTION\"),\n            LOW = sum(.$SNPEFF_IMPACT==\"LOW\"),\n            SYNONYMOUS_CODING = sum(.$SNPEFF_EFFECT==\"SYNONYMOUS_CODING\"),\n            SYNONYMOUS_STOP = sum(.$SNPEFF_EFFECT==\"SYNONYMOUS_STOP\"),\n            NON_SYNONYMOUS_START = sum(.$SNPEFF_EFFECT==\"NON_SYNONYMOUS_START\")\n          )\n        }) %>% ungroup(.)\n      return(var_df)\n    } else {\n      return(data.frame())\n    }\n  })\n\n  df_dt = reactive({\n    # reorder\n    df_full = df_full()\n    if (dim(df_full)[1]>0) {\n      qtl_df = merge(df_full,df_var(),by.x=\"Sys.Name\",by.y=\"SNPEFF_TRANSCRIPT_ID\",sort=F,all.x=T)\n      qtl_df = qtl_df[,c(\"Sys.Name\",\"Name\",\"STITCH\",\"SNPS\", \"INDELS\", \"UPSTREAM\",\n                         \"DOWNSTREAM\", \"INTRONS\", \"CODING\",\"HIGH\",\"MODERATE\",\"LOW\",\n                         \"Chr\",\"Start\",\"End\",\"Strand\",\"Alias\",\"Desc\")]\n    } else {\n      return(data.frame())\n    }\n  })\n\n  output$snptype = renderPlot({\n    # reorder\n    qtl_df = df_var()\n    if(dim(qtl_df)[1]>0) {\n      high = c(\"START_LOST\",\"STOP_GAINED\",\"STOP_LOST\",\"FRAME_SHIFT\")\n      moderate = c(\"NON_SYNONYMOUS_CODING\", \"CODON_DELETION\",\"CODON_INSERTION\",\n                   \"CODON_CHANGE_PLUS_CODON_DELETION\", \"CODON_CHANGE_PLUS_CODON_INSERTION\")\n      low = c(\"SYNONYMOUS_CODING\",\"SYNONYMOUS_STOP\",\"NON_SYNONYMOUS_START\")\n      var_df_melt = melt(qtl_df,id.vars=\"SNPEFF_TRANSCRIPT_ID\") %>% filter(.,value>0,variable%in%c(high,moderate,low))\n      var_df_melt$impact = sapply(var_df_melt$variable,function(i){\n        if (i %in% high) {\n          return(\"High Impact\")\n        } else if (i %in% moderate) {\n          return(\"Moderate Impact\")\n        } else {\n          return (\"Low Impact\")\n        }\n      })\n      var_df_melt2 = do.call(rbind,lapply(seq(1,dim(var_df_melt)[1]),function(i){\n        do.call(rbind,lapply(seq(1,as.numeric(var_df_melt[i,\"value\"])),function(j){\n          var_df_melt[i,]\n        }))\n      }))\n      var_df_melt2$impact = factor(var_df_melt2$impact, levels = c(\"High Impact\",\"Moderate Impact\",\"Low Impact\"))\n      var_df_melt2$SNPEFF_TRANSCRIPT_ID = factor(var_df_melt2$SNPEFF_TRANSCRIPT_ID, levels = sort(unique(var_df_melt2$SNPEFF_TRANSCRIPT_ID)))\n      ggplot(var_df_melt2, aes(x = factor(SNPEFF_TRANSCRIPT_ID), fill=variable)) + geom_bar(width=.8) +\n        coord_flip() + facet_wrap(~ impact) + scale_x_discrete(limits=rev(levels(var_df_melt2$SNPEFF_TRANSCRIPT_ID))) +\n        xlab(\"Gene\") + ylab(\"# SNPs/Indels\") + theme(legend.position=\"bottom\")\n    } else {\n      return(NULL)\n    }\n  })\n\n  df_dt = reactive({\n    # reorder\n    df_full = df_full()\n    if (dim(df_full)[1]>0) {\n      qtl_df = merge(df_full,df_var(),by.x=\"Sys.Name\",by.y=\"SNPEFF_TRANSCRIPT_ID\",sort=F,all.x=T)\n      qtl_df = qtl_df[,c(\"Sys.Name\",\"Name\",\"STITCH\",\"SNPS\", \"INDELS\", \"UPSTREAM\",\n                         \"DOWNSTREAM\", \"INTRONS\", \"CODING\",\"HIGH\",\"MODERATE\",\"LOW\",\n                         \"Chr\",\"Start\",\"End\",\"Strand\",\"Alias\",\"Desc\")]\n    } else {\n      return(data.frame())\n    }\n   \n  })\n\n  \n\n  # DATA TABLE\n  output$dt = DT::renderDataTable(\n    df_dt(), server = TRUE, selection = \"single\",\n    rownames = FALSE, extensions = 'Responsive', escape = FALSE)\n\n  # REACTIVE VALUES\n  values = reactiveValues(\n    old_selection = NULL,\n    link = NULL\n  )\n\n  # MONITOR OLD SELECTION\n  session$onFlush(once=FALSE, function(){\n    isolate({ values$old_selection <- input$dt_rows_selected })\n  })\n\n  #output$link = renderPrint(\"hi\")\n  output$link = renderText({\n    s = input$dt_rows_selected[length(input$dt_rows_selected)]\n    d = df_full()\n    s = which(d[,\"Sys.Name\"]==s)[1]\n    print(s)\n    if (length(s)) {\n      chr = levels(d[s, \"Chr\"])[d[s, \"Chr\"]]\n      start = d[s, \"Start\"]-10000\n      end = d[s, \"End\"]+10000\n      val = paste(chr,\"%3A\",start,\"..\",end, sep = \"\")\n      val = paste('http://steinmetzlab.embl.de/mQTL/?loc=',val,\"&tracks=\",input$m,\"%2C\", d[s, \"Sys.Name\"], sep=\"\")\n      print(val)\n    } else {\n      val = \"http://steinmetzlab.embl.de/mQTL/\"\n    }\n    paste(\"<div style='width: 100%; height: 600px'><iframe style='border: 1px solid black' src='\", val ,\"'width='100%' height='100%'></iframe></div>\",sep=\"\")\n  })\n\n\n\n  alpha_10 = reactive({\n    #summary(data[[input$m]]$permout[,type],input$co/100)\n    as.integer(input$co)[1]\n  })\n\n   output$manhattan = renderText(\n   {\n   paste0('<td align=\"middle\"><img src=\"http://steinmetzlab.embl.de/GenPhen/mQTL_plots/',\n    input$m, \"/mQTL_\", input$m, \"_FDR_\", alpha_10(), '.png\" ',\n    'valign=\"middle\" style=\"width: 100%;max-height: 100%\"></td>')\n   })\n\n\n})\n",
    "created" : 1453913214549.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1030180463",
    "id" : "1314BD65",
    "lastKnownWriteTime" : 1453913679,
    "path" : "~/Documents/git/steinmetz-lab/mQTL_explorer/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}